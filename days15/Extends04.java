package days15;

// 상속받은 클래스의 생성자
// 일반 객체의 생성과정
// 1. 멤버 필드 메모리 로딩
// 2. 생성자 호출

// 상속관계에서의 객체 생성과정
// 1. 멤버 필드의 메모리 로딩 - 부모/자식 클래스의 모든 멤버필드가 메모리 로딩
// 2. 생성자 호출( 먼저 자식 클래스의 생성자 호출)
// 3. 자식 클래스 생성자의 첫 번째 실행 코드인 super() 에 의해 부모클래스의
//		생성자 호출. super() 라는 명령은 따로 쓰지 않아도 이미 존재하며 부모클래스가
// 		있다면 자동 호출되는 명령
// 4. 자식 클래스의 생성자의 나머지 코드들 실행
// - 부모클래스의 private 멤버와 같은 경우 자식 클래스에서 초기화를 할 수 없기 때문에
//		부모클래스의 생성자를 통해 초기화를 실행

class SuperB {
	int superNum;
	
	public SuperB() {
		System.out.println("부모클래스의 생성자 실행");
	}// 부모 클래스 생성자
}

class SubB extends SuperB{
	//SuperB 클래스 상송
	int subNum;
	
	// 생성자를 별도로 꺼내서 정의하지 않았다면....
	// 보이지 않는 곳에 디폴트 생성자가 존재할 것이며
	// 그의 첫번째 명령은 아래와 같이 super(); 가 자리하고 있습니다
	// SubB(){
	// 		super();
	// }
	
	// 디폴트 생성자를 별도로 꺼내서 정의한 경우....
	SubB(){
		super(); // 생략가능
		// 자식 클래스에서 부모클래스 생성자 호출은 super(); 라고 명령하며,
		// 반드시 첫번째 실행코드로 씁니다
		// 부모 클래스의 생성자가 오버로딩 되어 있는지와 상관없이
		// super(); 명령은 실행됩니다	 super(); 명령 생략 - 자동 호출
		
		// super(); 명령이 감춰지지 않아야하며, 꼭 써야하는 경우 -
		// 				부모클래스의 생성자가 오버로딩 또는 대체되어서 디폴트 생성자가 없을때
		// 예를 들어 전달인수가 있다면 super(인수); 넣어줘야함
		System.out.println("자식클래스의 디폴트 생성자 실행");
	}
	
	// 매ㅐㄱ변수가 있느 ㄴ생성자가 오버로딩된 경우 ..... 
	// this() 로 형제 생성자를 호출한 경우...
	public SubB(int subNum) {
		// 오버로딩된 자식클래스 생성자 this() 를 코딩하는데 그 둘을 같이 실행할 수는 없음
		// 현재 클래스의 매개변수가 없는 생성자를 this() 로 호출하고 그 안에서
		// super() 가 실행되도록 합니다
		this();
		System.out.println("자식클래스의 오버로딩된 생성자 실행(this()O) ");
		// 부모나 형제 생성자에 매개변수가 있는 경우 반드시 호출하려는
		// super() 또는 this() 의 매개변수에 맞춰 전달인수를 전달합니다
	}
	// 매개변수가 있는 생성자로 자식생성자가 오버로딩된 경우....
	// this() 로 형제 생성자를 호출하지 않은 경우
	public SubB( int subNum, int num ) {
		super();
		System.out.println("자식클래스의 오버로딩된 생성자 실행(this()) X");
	}
}


public class Extends04 {

	public static void main(String[] argrs) {
		/**/
		//
		SubB b = new SubB();// 디폴트 생성자 호출
		// 호출 순서
//		부모클래스의 생성자 실행
//		자식클래스의 디폴트 생성자 실행
		System.out.println();
		
		SubB c = new SubB(20);
		System.out.println();
//		부모클래스의 생성자 실행
//		자식클래스의 디폴트 생성자 실행
//		자식클래스의 오버로딩된 생성자 실행(this()O) 
		
		SubB d = new SubB(20, 40);
		System.out.println();
//		부모클래스의 생성자 실행
//		자식클래스의 오버로딩된 생성자 실행(this()) X
		
		// 자식 클래스 호출이 된다는 건 객체가 생성이 된다는것
		// 그리고 부모 클래스 자식클래스의 내부에서 첫번째로 호출
		// 다만 굳이 쓰지 않아도 호출이 된다는 것
		// 결론 오버로딩 되는 애들 없으면 굳이 super(); 를 쓸필요가 없다

	}

}

// 1. 자식 클래스 객체 생성 (자식 클래스 생성자 호출)
// 2. 자식 클래스 내부에서 부모 클래스의 생성자 호출
// 3. 부모 클래스 생성자 실행
// ※ 2번의 부모클래스 호출은 따로 쓰지 않아도 자동으로 자식 클래스 내부 첫번째 명령으로 실행
// 4. 자식 클래스의 생성자가 오버로딩된 경우, 모든 자식 클래스 생성자들은
//		this() 와 super() 명령 중 하나를 선택해야하는데, 안쓰면 super(); 가 자동적용
// 5. this() 를 쓰는 경우 호출된 형제 생성자에게 super 를 호출해줍니다
